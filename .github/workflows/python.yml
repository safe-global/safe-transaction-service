name: Python CI
on: [push, pull_request]

jobs:
  test-app:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Setup and run ganache
      run: |
        docker run --detach --publish 8545:8545 --network-alias ganache -e DOCKER=true trufflesuite/ganache-cli:latest --defaultBalanceEther 10000 --gasLimit 10000000 -a 30 --noVMErrorsOnRPCResponse --chainId 1337 --networkId 1337 -d
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      name: Cache pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-test.txt') }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - uses: actions/cache@v2
      name: Cache pre-commit
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-precommit-${{ hashFiles('**/.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-precommit-
    - name: Install dependencies
      run: |
        pip install wheel
        pip install -r requirements-test.txt coveralls pre-commit
      env:
        PIP_USE_MIRRORS: true
    - name: Run pre-commit
      run: pre-commit run --all-files
    - name: Run tests and coverage
      run: |
        python manage.py check
        python manage.py makemigrations --check --dry-run
        coverage run --source=$SOURCE_FOLDER -m py.test -rxXs --reruns 3
      env:
        SOURCE_FOLDER: safe_transaction_service
        DJANGO_SETTINGS_MODULE: config.settings.test
        DATABASE_URL: psql://postgres:postgres@localhost/postgres
        ETHEREUM_NODE_URL: http://localhost:8545
        ETHEREUM_TRACING_NODE_URL: http://localhost:8545
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
        ETHEREUM_MAINNET_NODE: ${{ secrets.ETHEREUM_MAINNET_NODE }}
        COINMARKETCAP_API_TOKEN: ${{ secrets.COINMARKETCAP_API_TOKEN }}
    - name: Send results to coveralls
      continue-on-error: true  # Ignore coveralls problems
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for coveralls
  docker-deploy:
    runs-on: ubuntu-latest
    needs: test-app
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2
    - name: Dockerhub login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Deploy Master
      if: github.ref == 'refs/heads/master'
      run: bash scripts/deploy_docker.sh staging
      env:
        DOCKERHUB_PROJECT: safe-transaction-service
    - name: Deploy Develop
      if: github.ref == 'refs/heads/develop'
      run: bash scripts/deploy_docker.sh develop
      env:
        DOCKERHUB_PROJECT: safe-transaction-service
    - name: Deploy Tag
      if: startsWith(github.ref, 'refs/tags/')
      run: bash scripts/deploy_docker.sh ${GITHUB_REF##*/}
      env:
        DOCKERHUB_PROJECT: safe-transaction-service
